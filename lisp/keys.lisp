(defvar keys::key-list '(
  (key:backspace 8)
  (key:tab 9)
  (key:enter 13)
  (key:shift 16)
  (key:ctrl 17)
  (key:alt 18)
  (key:pause/break 19)
  (key:caps_lock 20)
  (key:escape 27)
  (key:page_up 33)
  (key:Space 32)
  (key:page_down 34)
  (key:end 35)
  (key:home 36)
  (key:arrow_left 37)
  (key:arrow_up 38)
  (key:arrow_right 39)
  (key:arrow_down 40)
  (key:print_screen 44)
  (key:insert 45)
  (key:delete 46)
  (key:0 48)
  (key:1 49)
  (key:2 50)
  (key:3 51)
  (key:4 52)
  (key:5 53)
  (key:6 54)
  (key:7 55)
  (key:8 56)
  (key:9 57)
  (key:a 65)
  (key:b 66)
  (key:c 67)
  (key:d 68)
  (key:e 69)
  (key:f 70)
  (key:g 71)
  (key:h 72)
  (key:i 73)
  (key:j 74)
  (key:k 75)
  (key:l 76)
  (key:m 77)
  (key:n 78)
  (key:o 79)
  (key:p 80)
  (key:q 81)
  (key:r 82)
  (key:s 83)
  (key:t 84)
  (key:u 85)
  (key:v 86)
  (key:w 87)
  (key:x 88)
  (key:y 89)
  (key:z 90)
  (key:left_window_key 91)
  (key:right_window_key 92)
  (key:select_key 93)
  (key:numpad_0 96)
  (key:numpad_1 97)
  (key:numpad_2 98)
  (key:numpad_3 99)
  (key:numpad_4 100)
  (key:numpad_5 101)
  (key:numpad_6 102)
  (key:numpad_7 103)
  (key:numpad_8 104)
  (key:numpad_9 105)
  (key:multiply 106)
  (key:add 107)
  (key:subtract 109)
  (key:decimal_point 110)
  (key:divide 111)
  (key:f1 112)
  (key:f2 113)
  (key:f3 114)
  (key:f4 115)
  (key:f5 116)
  (key:f6 117)
  (key:f7 118)
  (key:f8 119)
  (key:f9 120)
  (key:f10 121)
  (key:f11 122)
  (key:f12 123)
  (key:num_lock 144)
  (key:scroll_lock 145)
  ;(key:My_Computer_(multimedia_keyboard) 182)
  ;(key:My_Calculator_(multimedia_keyboard) 183)
  (key:semi-colon 186)
  (key:equal_sign 187)
  (key:comma 188)
  (key:dash 189)
  (key:period 190)
  (key:forward_slash 191)
  (key:open_bracket 219)
  (key:back_slash 220)
  (key:close_braket 221)
  (key:single_quote 222)
))

(defun keys::to-table (lst keyfcn valuefcn)
   (let ((table (makehashmap)))
     (for-each v lst
        (hashmap-set table (keyfcn v) (valuefcn v))
     )
     table 
     ))

(defvar keys::table (keys::to-table keys::key-list cadr car))

(defun keys:code-to-key (keycode) (hashmap-get keys::table keycode))
